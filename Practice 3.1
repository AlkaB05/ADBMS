DROP TABLE IF EXISTS FeePayments;

CREATE TABLE FeePayments (
    payment_id INT PRIMARY KEY,
    student_name VARCHAR(100) NOT NULL,
    amount DECIMAL(10,2) CHECK (amount > 0),
    payment_date DATE NOT NULL
);

START TRANSACTION;  
INSERT INTO FeePayments (payment_id, student_name, amount, payment_date)
VALUES 
(1, 'Ashish', 5000.00, '2024-06-01'),
(2, 'Smaran', 4500.00, '2024-06-02'),
(3, 'Vaibhav', 5500.00, '2024-06-03');

COMMIT; 

SELECT 'AFTER PART A' AS STATUS;
SELECT * FROM FeePayments;

START TRANSACTION;


INSERT INTO FeePayments (payment_id, student_name, amount, payment_date)
VALUES (4, 'Kiran', 6000.00, '2024-06-04');

INSERT INTO FeePayments (payment_id, student_name, amount, payment_date)
VALUES (1, 'Ashish', -1000.00, '2024-06-05');


ROLLBACK;


SELECT 'AFTER PART B' AS STATUS;
SELECT * FROM FeePayments;


INSERT INTO FeePayments (payment_id, student_name, amount, payment_date)
VALUES (5, 'Meera', 4800.00, '2024-06-06');

-- Invalid insert (NULL student_name -> violates NOT NULL constraint)
INSERT INTO FeePayments (payment_id, student_name, amount, payment_date)
VALUES (6, NULL, 4000.00, '2024-06-07');

-- Entire transaction is rolled back because of the failure
ROLLBACK;

-- Verify table is unchanged
SELECT 'AFTER PART C' AS STATUS;
SELECT * FROM FeePayments;

START TRANSACTION;

INSERT INTO FeePayments (payment_id, student_name, amount, payment_date)
VALUES 
(7, 'Nikhil', 7000.00, '2024-06-08'),
(8, 'Ravi', 6500.00, '2024-06-09');

COMMIT;

-- Final table state after all transactions
SELECT 'FINAL TABLE STATE' AS STATUS;
SELECT * FROM FeePayments;
